room.view.
-- case room.active of
         -- Room.Model.Top ->          --, List.map (\wall -> Css.additionalWallStyles wall room.active room.size.height ) room.walls
         --     Top.content room.active
         -- _ ->
         --     div [][]

                     -- case room.active of
         -- Room.Model.Top ->          --, 
         --     Top.content room.active
         -- _ ->
         --     div [][]

         -- (List.map (\wall -> Css.additionalWallStyles wall room.active room.size.height) room.walls) |> Attributes.map

         -- let 
                --     styles =
                --         Css.additionalRoomStyles room
                    
                --     style_ =
                --         List.concat styles
                --     _ = Debug.log "style" style_
                -- in
                --     style [("","")]
                    
        -- , Css.additionalWallStyles room
        -- ,   Attributes.map Attributes.style (List.concat (Css.additionalRoomStyles room))



        buildWalls : Room -> Html msg
buildWalls room =
    div
        ([ classList
            [ ( "wall", True )
            , ( "top", room.active == Room.Model.Top )
            , ( "right", room.active == Room.Model.Right )
            , ( "floor", room.active == Room.Model.Bottom )
            , ( "left", room.active == Room.Model.Left )
            , ( "center", room.active == Room.Model.Center )
            ]
         ]
            ++ Css.additionalRoomStyles room
        )
        []